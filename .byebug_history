c
params[:id]
params
c
params[:body][:tried]
params[:body][:tried"]
params
c
@journal = Journal.create(journal_params)
journal_params
params
c
params
c
@activity.save
 @activity = Activity.new(activity_params)
@activity.valid?
@activitiy.valid?
params
c
params["category"]
params
c
params
c
params
c
resp
params
c
params
relationship
@relationship
c
params
c
params[:id]
c
params
c
params[:id]
params
c
params
c
relationship_params
params["tried"]
params["user_id"]
params["activity_id"]
params
c
params
Activity.find_by(activity: params[:activity])
exit
params["activity"]
params
c
params
c
params
c
params
c
headers['Authorization']
params
c
token = issue_token({user_id: @user.id})
@user.authenticate(login_user_params[:password])
@@user.authenticate(login_user_params[:password])
@user && @user.authenticate(login_user_params[:password])
@user
request.headers
request.headers['Authorization']
headers['Authorization']
c
C
token = issue_token({user_id: @user.id})
@user.authenticate(login_user_params[:password])
@user.authenticate
login_user_params
@user && @user.authenticate(login_user_params[:password])
if @user && @user.authenticate(login_user_params[:password])
    end
      render json: {error: ""}, status: 400
    else
      render json: {user: @user, jwt: token}
      token = issue_token({user_id: @user.id})
if @user && @user.authenticate(login_user_params[:password])
@user
headers['Authorization']
request.headers['Authorization']
request.headers
request
c
request.headers['Authorization']
request.headers
request
params
exit
token
@user
token = JWT.encode({user_id: @user.id}, 'SECRET')
@user
token 
params
exit
headers['Authorization']
exit
headers['Authorization']
request.headers
headers['Authorization']
c
exit
headers['Authorization']
token
headers['Authorization']
exit
headers[:Authorization]
headers[Authorization]
headers['Content-Type]
headers['Authorization']
headers
request
request.headers['Authorization']
c
this_user
c
x
params
auth
request_id
request
c
params
c
request.headers.authorization
request.headers.uthorization
request.headers['Authorization']
request.headers
request.parameters
c
exit
request.authorization
request.parameters
request
@_params
@params
c
id
c
user
c
id
c
user
params
c
user
JWT.decode({user: user}, 'SECRET')
JWT.decode(user, 'SECRET')
  render json: {user: user}
  render json: {user: user, jwt: token}
token = JWT.encode({user_id: user.id}, 'SECRET')
user && user.authenticate(login_user_params[:password])
user.authenticate(login_user_params[:password])
user
c
params
c
params["user"]
params.user
params
c
exit
params
c
headers["auth"]
headers.auth
headers.headers
@headers.headers
headers['Authorization']
headers
c
headers['Authorization']
@headers['Authorization']
@headers.authorization
request.headers["Authorization"]
c
JWT.decode(get_token, 'SECRET')
JWT.decode(get_token, 'SECRET')[0]
JWT
c
request
c
headers['Authorization']
headers.authorization
headers
c
  JWT.decode(get_token, 'SECRET')[0]
request.authorization
request_id
request
JWT
c
exit
params
exit
user.id
user
c
User.create(user_params)
exit
User.create(user_params)
user_params
params
